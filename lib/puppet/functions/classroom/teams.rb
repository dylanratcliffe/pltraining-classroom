# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   Returns an array of teams that this user is a member of.
#
Puppet::Functions.create_function(:'classroom::teams') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    raise(Puppet::ParseError, "teams(): Must pass 1 argument, not #{args.size}") if args.size != 1

    user  = args[0]
    raise(Puppet::ParseError, "teams(): Argument must be a username string") if user.class != String

    begin
      teams = function_hiera(['teams', ''])
      return '' if teams.nil?
    rescue Puppet::ParseError => e
      # Hiera must not be enabled on the master yet. Boo.
      return false
    end

    # [{"name"=>["member1", "member2"]}, {"name2"=>["member1"]}]

    #  Ruby 1.8, why must you vex me so?
    # teams.select { |name, members| members.include? user }.keys
    if ! teams.empty?
      teams = Hash[teams.select { |name, members| members.include? user }].keys
    end
    return teams if ! teams.empty?
    return ''
  
  end
end
